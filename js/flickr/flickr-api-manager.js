// Generated by CoffeeScript 1.7.1
(function() {
  var exports,
    __hasProp = {}.hasOwnProperty;

  exports = this;

  exports.jsonFlickrApi = function(json) {
    return jsonFlickrApi.fire('apiresponse', json);
  };

  exports.flickrApiManager = {
    apiOptions: {
      apiKey: 'a3d606b00e317c733132293e31e95b2e',
      format: 'json',
      noJsonCallback: false,
      others: {
        text: '',
        sort: 'date-posted-desc',
        per_page: 0
      }
    },
    _state: {
      waiting: false
    },
    setAPIOptions: function(options) {
      var k, v, _results;
      _results = [];
      for (k in options) {
        if (!__hasProp.call(options, k)) continue;
        v = options[k];
        if (this.apiOptions.hasOwnProperty(k)) {
          _results.push(this.apiOptions[k] = v);
        } else {
          _results.push(this.apiOptions.others[k] = v);
        }
      }
      return _results;
    },
    validateOptions: function() {
      var e, negative, perPage;
      try {
        perPage = +this.apiOptions.others.per_page;
        if (isNaN(perPage)) {
          throw new Error("per_page is NaN");
        }
        negative = perPage < 0;
        if (negative) {
          return this.apiOptions.others.per_page = 0;
        }
      } catch (_error) {
        e = _error;
        console.log('Error in flickrApiManager.validateOptions');
        console.log("message -> " + e.message);
        console.log("stack -> " + e.stack);
        console.log("fileName -> " + (e.fileName || e.sourceURL));
        return console.log("line -> " + (e.line || e.lineNumber));
      }
    },
    sendRequestJSONP: function(options) {
      var newScript, oldScript;
      if (this._state.waiting) {
        return false;
      }
      this.changeState({
        'waiting': true
      });
      newScript = document.createElement('script');
      oldScript = document.getElementById('kick-api');
      if (options != null) {
        this.setAPIOptions(options);
      }
      this.validateOptions();
      newScript.id = 'kick-api';
      newScript.src = this.genURI(this.apiOptions);
      if (oldScript != null) {
        document.body.replaceChild(newScript, oldScript);
      } else {
        document.body.appendChild(newScript);
      }
      return this.fire('sendrequest', null);
    },
    genURI: function(options) {
      var k, noJsonp, uri, v, _ref;
      uri = "api_key=" + options.apiKey;
      _ref = options.others;
      for (k in _ref) {
        if (!__hasProp.call(_ref, k)) continue;
        v = _ref[k];
        uri += "&" + k + "=" + v;
      }
      uri += "&format=" + options.format;
      noJsonp = options.format === 'json' && options.noJsonCallback;
      if (noJsonp) {
        uri += 'noJsonCallback';
      }
      return "https://api.flickr.com/services/rest/?method=flickr.photos.search&" + uri;
    },
    genPhotosURLArr: function(json) {
      var i, v, _i, _len, _ref, _results;
      _ref = json.photos.photo;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        v = _ref[i];
        _results.push("http://farm" + v.farm + ".staticflickr.com/" + v.server + "/" + v.id + "_" + v.secret + ".jpg");
      }
      return _results;
    },
    handleAPIResponse: function(json) {
      this.changeState({
        'waiting': false
      });
      this.fire('apiresponse', json);
      return this.fire('urlready', this.genPhotosURLArr(json));
    }
  };

  makePublisher(jsonFlickrApi);

  makePublisher(flickrApiManager);

  makeStateful(flickrApiManager);

  jsonFlickrApi.on('apiresponse', 'handleAPIResponse', flickrApiManager);

}).call(this);
