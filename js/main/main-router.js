// Generated by CoffeeScript 1.7.1
(function() {
  document.addEventListener('DOMContentLoaded', function() {
    var mediator;
    mediator = {
      store: {},
      setDenomiPhotosLength: function(urlArr) {
        return progressbarModel.setDenominator(urlArr.length);
      },
      checkCanQuit: function() {
        var bool;
        bool = !flickrApiManager.getState('waiting') && photosModel.getState('completed');
        return progressbarModel.changeState({
          canQuit: bool
        });
      },
      decideFlowSpeed: function() {
        var speed;
        speed = progressbarView.getState('full') ? 'fast' : flickrApiManager.getState('waiting') ? 'slow' : 'middle';
        return progressbarModel.setFlowSpeed(speed);
      },
      handleFading: function(statusObj) {
        var action;
        action = statusObj.fading;
        switch (action) {
          case 'stop':
            return renderer.deleteUpdater(this.store.fadingUpdater);
          default:
            this.store.fadingUpdater = progressbarView.fadingUpdate;
            return renderer.addUpdater(this.store.fadingUpdater);
        }
      },
      handleButtonClick: function() {
        progressbarModel.run();
        photosModel.clear();
        flickrApiManager.setAPIOptions(inputView.getOptions());
        photosModel.setProperties({
          maxConcurrentRequest: inputView.getMaxConcurrentRequest()
        });
        return flickrApiManager.sendRequestJSONP();
      }
    };
    flickrApiManager.on('urlready', 'initPhotos', photosModel);
    flickrApiManager.on('urlready', 'setDenomiPhotosLength', mediator);
    photosModel.on('loadedincreased', 'setNumerator', progressbarModel);
    flickrApiManager.on('waitingchange', 'checkCanQuit', mediator);
    photosModel.on('completedchange', 'checkCanQuit', mediator);
    flickrApiManager.on('waitingchange', 'decideFlowSpeed', mediator);
    photosModel.on('clear', 'clear', progressbarModel);
    progressbarView.on('fullchange', 'decideFlowSpeed', mediator);
    progressbarModel.on('fadingchange', 'handleFading', mediator);
    progressbarModel.on('run', 'draw', renderer);
    progressbarModel.on('stop', 'pause', renderer);
    return inputView.on('searchclick', 'handleButtonClick', mediator);
  });

}).call(this);
