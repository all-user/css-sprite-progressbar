// Generated by CoffeeScript 1.7.1
(function() {
  var exports;

  exports = this;

  exports.renderer = {
    updaters: [],
    framerate: 16,
    timerID: null,
    _state: {
      running: false,
      deleted: false
    },
    addUpdater: function(updater) {
      if (updater instanceof Array) {
        return this.updaters.concat(updater);
      } else if (typeof updater === 'function') {
        return this.updaters.push(updater);
      }
    },
    deleteUpdater: function(updater) {
      return this._visitUpdaters('delete', updater);
    },
    _visitUpdaters: function(action, fn) {
      var i, updaters, v, _i, _len, _results;
      updaters = this.updaters;
      if (action === 'delete') {
        _results = [];
        for (i = _i = 0, _len = updaters.length; _i < _len; i = ++_i) {
          v = updaters[i];
          if (v === fn) {
            updaters[i] = null;
            _results.push(this.changeState({
              deleted: true
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    },
    draw: function() {},
    pause: function() {
      clearInterval(this.timerID);
      return this.changeState({
        running: false
      });
    },
    makeDraw: function() {
      var updaters;
      updaters = this.updaters;
      return this.draw = (function(_this) {
        return function() {
          if (_this._state.running) {
            return;
          }
          _this.changeState({
            running: true
          });
          return _this.timerID = setInterval(function() {
            var e, i, v, _i, _len;
            for (i = _i = 0, _len = updaters.length; _i < _len; i = ++_i) {
              v = updaters[i];
              try {
                v();
              } catch (_error) {
                e = _error;
                try {
                  new Error("Error in draw : e -> " + e);
                } catch (_error) {
                  console.log("message -> " + e.message);
                  console.log("stack -> " + e.stack);
                  console.log("fileName -> " + (e.fileName || e.sourceURL));
                  console.log("line -> " + (e.line || e.lineNumber));
                }
              }
            }
            if (_this._state.deleted) {
              i = 0;
              while (i !== updaters.length) {
                if (updaters[i] === null) {
                  updaters.splice(i, 1);
                } else {
                  i++;
                }
              }
              return _this.changeState({
                deleted: false
              });
            }
          }, _this.framerate);
        };
      })(this);
    }
  };

  renderer.makeDraw();

  makePublisher(renderer);

  makeStateful(renderer);

}).call(this);
