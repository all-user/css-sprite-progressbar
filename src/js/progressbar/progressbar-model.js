// Generated by CoffeeScript 1.7.1
(function() {
  var exports;

  exports = this;

  exports.progressbarModel = {
    _state: {
      hidden: true,
      fading: 'stop',
      flowSpeed: 'slow',
      denominator: 0,
      numerator: 0,
      progress: 0,
      canRenderRatio: false,
      canQuit: false
    },
    speed: {
      type: {
        stop: 0,
        slow: 1,
        middle: 2,
        fast: 3
      },
      array: ['stop', 'slow', 'middle', 'fast']
    },
    processType: {
      ceil: 'ceil',
      floor: 'floor',
      round: 'round'
    },
    run: function() {
      return this.fire('run', this);
    },
    stop: function() {
      return this.fire('stop', this);
    },
    clear: function() {
      this.changeState({
        denominator: 0,
        numerator: 0,
        progress: 0,
        canRenderRatio: true,
        canQuit: false
      });
      return this.fire('clear', null);
    },
    fadeIn: function() {
      return this.changeState({
        fading: 'in'
      });
    },
    fadeOut: function() {
      return this.changeState({
        fading: 'out'
      });
    },
    fadeStop: function() {
      return this.changeState({
        fading: 'stop'
      });
    },
    setFlowSpeed: function(speed) {
      if (this.speed.type.hasOwnProperty(speed)) {
        return this.changeState({
          flowSpeed: speed
        });
      }
    },
    flowMoreFaster: function() {
      var currentSpeed;
      currentSpeed = this.speed.type[this._state.flowSpeed];
      return this.setFlowSpeed(this.speed.array[currentSpeed + 1]);
    },
    flowMoreSlower: function() {
      var currentSpeed;
      currentSpeed = this.speed.type[this._state.flowSpeed];
      return this.setFlowSpeed(this.speed.array[currentSpeed - 1]);
    },
    setDenominator: function(denomi) {
      return this._setProgress('denominator', denomi);
    },
    setNumerator: function(numer) {
      return this._setProgress('numerator', numer);
    },
    _setProgress: function(type, value) {
      var o;
      o = {};
      o[type] = value;
      this.changeState(o);
      return this.changeState({
        progress: this.getProgress(),
        canRenderRatio: true
      });
    },
    getProgress: function(process) {
      var res;
      res = this._state.numerator / this._state.denominator;
      if (this.processType.hasOwnProperty(process)) {
        Math[this.processType[process]](res);
      }
      return res;
    }
  };

  makePublisher(progressbarModel);

  makeStateful(progressbarModel);

}).call(this);
